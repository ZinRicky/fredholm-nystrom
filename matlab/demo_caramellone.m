function demo_caramellone(tipo, n_lambda, max_ade)

% Demo errori e condizionamento sul poligono con autointersezioni
% $\tilde{D}_2$.

if nargin < 1
    tipo = 'exp';
end
if nargin < 2
    n_lambda = 1;
end
if nargin < 3
    max_ade = 20;
end

poligono = caramellone();

switch tipo
    case 'exp'
        K = @(t1, t2, s1, s2) (s1.^2 - s2.^2) .* exp(s1 + s2 + t1 + t2);
        x_vera = @(t1, t2) (t1 + t2).^2;
        fprintf('Nucleo esponenziale.\n\n');
    case 'exp2'
        K = @(t1, t2, s1, s2) (s1.^2 - s2.^2) .* exp(s1 + s2 + t1 + t2);
        x_vera = @(t1, t2) abs(t1 + t2);
        fprintf('Nucleo esponenziale, soluzione non liscia.\n\n');
    case 'sin'
        K = @(t1, t2, s1, s2) s1 .* s2 .* sin(t1 + t2);
        x_vera = @(t1, t2) (t1 + t2).^2;
        fprintf('Nucleo sinusoidale.\n\n');
    case 'lin'
        K = @(t1, t2, s1, s2) s1 + s2 + t1 + t2;
        x_vera = @(t1, t2) (t1.^2 + t2.^2).^(5/2);
        fprintf('Nucleo lineare, soluzione non liscia.\n\n');
    otherwise
        error('Esempio non supportato in questa demo.');
end

lambda_demo = [0.001 0.01 0.1 1 10];
for lambda = lambda_demo((6-n_lambda):5)
    switch tipo
        case 'exp'
            y = @(t1, t2) -6.360019674493428E-4 * exp(t1 + t2) + ...
                +lambda * x_vera(t1, t2);
        case 'exp2'
            y = @(t1, t2) -0.0016841293782196985 * exp(t1 + t2) + ...
                +lambda * x_vera(t1, t2);
        case 'sin'
            y = @(t1, t2) ...
                (1/22500000).*(-8820-160*5.^(1/2)-95*(2*(5-5.^( ...
  1/2))).^(1/2)+19.*(10.*(5+(-1).*5.^(1/2))).^(1/2)+(-65).*(2.*(5+ ...
  5.^(1/2))).^(1/2)+27.*(10.*(5+5.^(1/2))).^(1/2)+6792.*cos((1/9).* ...
  pi)+(-960).*3.^(1/2).*cos((1/9).*pi)+(-960).*cos((1/9).*pi).^2+ ...
  504.*3.^(1/2).*cos((1/9).*pi).^2+976.*cos((1/9).*pi).^3+(-6792).* ...
  cos((2/9).*pi)+960.*3.^(1/2).*cos((2/9).*pi)+6720.*cos((2/9).*pi) ...
  .^2+(-504).*3.^(1/2).*cos((2/9).*pi).^2+(-976).*cos((2/9).*pi).^3+ ...
  64.*cos((2/9).*pi).^6+13440.*sin((1/18).*pi)+1920.*cos((1/18).*pi) ...
  .*sin((1/18).*pi)+1920.*cos((1/18).*pi).^2.*sin((1/18).*pi)+( ...
  -11520).*cos((1/9).*pi).*sin((1/18).*pi)+(-1920).*cos((1/18).*pi) ...
  .^2.*cos((1/9).*pi).*sin((1/18).*pi)+(-1920).*cos((1/18).*pi).* ...
  cos((1/9).*pi).^2.*sin((1/18).*pi)+(-1920).*cos((1/9).*pi).^3.* ...
  sin((1/18).*pi)+(-3840).*sin((1/18).*pi).^2+(-7680).*cos((1/18).* ...
  pi).*sin((1/18).*pi).^2+7680.*cos((1/18).*pi).*cos((1/9).*pi).* ...
  sin((1/18).*pi).^2+3840.*cos((1/9).*pi).^2.*sin((1/18).*pi).^2+ ...
  2048.*sin((1/18).*pi).^3+384.*cos((1/18).*pi).*sin((1/18).*pi).^3+ ...
  768.*cos((1/18).*pi).^2.*sin((1/18).*pi).^3+(-1920).*cos((1/9).* ...
  pi).*sin((1/18).*pi).^3+(-768).*cos((1/18).*pi).^2.*cos((1/9).*pi) ...
  .*sin((1/18).*pi).^3+(-384).*cos((1/18).*pi).*cos((1/9).*pi).^2.* ...
  sin((1/18).*pi).^3+(-128).*cos((1/9).*pi).^3.*sin((1/18).*pi).^3+ ...
  2880.*sin((1/9).*pi)+(-6792).*3.^(1/2).*sin((1/9).*pi)+11520.*cos( ...
  (1/18).*pi).*sin((1/9).*pi)+1920.*cos((1/18).*pi).^3.*sin((1/9).* ...
  pi)+(-960).*cos((1/9).*pi).*sin((1/9).*pi)+1920.*cos((1/18).*pi) ...
  .^2.*cos((1/9).*pi).*sin((1/9).*pi)+(-3840).*cos((1/9).*pi).^2.* ...
  sin((1/9).*pi)+(-912).*3.^(1/2).*cos((1/9).*pi).^2.*sin((1/9).*pi) ...
  +1920.*cos((1/18).*pi).*cos((1/9).*pi).^2.*sin((1/9).*pi)+96.*cos( ...
  (1/9).*pi).^3.*sin((1/9).*pi)+(-7680).*cos((1/18).*pi).^2.*sin(( ...
  1/18).*pi).*sin((1/9).*pi)+7680.*cos((1/9).*pi).^2.*sin((1/18).* ...
  pi).*sin((1/9).*pi)+1920.*cos((1/18).*pi).*sin((1/18).*pi).^2.* ...
  sin((1/9).*pi)+768.*cos((1/18).*pi).^3.*sin((1/18).*pi).^2.*sin(( ...
  1/9).*pi)+(-1920).*cos((1/9).*pi).*sin((1/18).*pi).^2.*sin((1/9).* ...
  pi)+(-384).*cos((1/18).*pi).*cos((1/9).*pi).^2.*sin((1/18).*pi) ...
  .^2.*sin((1/9).*pi)+(-384).*cos((1/9).*pi).^3.*sin((1/18).*pi) ...
  .^2.*sin((1/9).*pi)+2880.*sin((1/9).*pi).^2+(-552).*3.^(1/2).*sin( ...
  (1/9).*pi).^2+(-3840).*cos((1/18).*pi).^2.*sin((1/9).*pi).^2+816.* ...
  cos((1/9).*pi).*sin((1/9).*pi).^2+3840.*3.^(1/2).*cos((1/9).*pi).* ...
  sin((1/9).*pi).^2+(-7680).*cos((1/18).*pi).*cos((1/9).*pi).*sin(( ...
  1/9).*pi).^2+384.*cos((1/9).*pi).^3.*sin((1/9).*pi).^2+1920.*cos(( ...
  1/18).*pi).*sin((1/18).*pi).*sin((1/9).*pi).^2+384.*cos((1/18).* ...
  pi).^3.*sin((1/18).*pi).*sin((1/9).*pi).^2+(-1920).*cos((1/9).*pi) ...
  .*sin((1/18).*pi).*sin((1/9).*pi).^2+384.*cos((1/18).*pi).^2.*cos( ...
  (1/9).*pi).*sin((1/18).*pi).*sin((1/9).*pi).^2+(-768).*cos((1/9).* ...
  pi).^3.*sin((1/18).*pi).*sin((1/9).*pi).^2+(-1008).*3.^(1/2).*sin( ...
  (1/9).*pi).^3+1920.*cos((1/18).*pi).*sin((1/9).*pi).^3+128.*cos(( ...
  1/18).*pi).^3.*sin((1/9).*pi).^3+(-288).*cos((1/9).*pi).*sin((1/9) ...
  .*pi).^3+384.*cos((1/18).*pi).^2.*cos((1/9).*pi).*sin((1/9).*pi) ...
  .^3+(-384).*3.^(1/2).*cos((1/9).*pi).^2.*sin((1/9).*pi).^3+768.* ...
  cos((1/18).*pi).*cos((1/9).*pi).^2.*sin((1/9).*pi).^3+(-2880).* ...
  sin((2/9).*pi)+6792.*3.^(1/2).*sin((2/9).*pi)+960.*cos((2/9).*pi) ...
  .*sin((2/9).*pi)+3840.*cos((2/9).*pi).^2.*sin((2/9).*pi)+912.*3.^( ...
  1/2).*cos((2/9).*pi).^2.*sin((2/9).*pi)+(-5856).*cos((2/9).*pi) ...
  .^3.*sin((2/9).*pi)+384.*cos((2/9).*pi).^5.*sin((2/9).*pi)+(-8640) ...
  .*sin((2/9).*pi).^2+552.*3.^(1/2).*sin((2/9).*pi).^2+(-816).*cos(( ...
  2/9).*pi).*sin((2/9).*pi).^2+(-3840).*3.^(1/2).*cos((2/9).*pi).* ...
  sin((2/9).*pi).^2+(-384).*cos((2/9).*pi).^3.*sin((2/9).*pi).^2+ ...
  960.*cos((2/9).*pi).^4.*sin((2/9).*pi).^2+1008.*3.^(1/2).*sin(( ...
  2/9).*pi).^3+6048.*cos((2/9).*pi).*sin((2/9).*pi).^3+384.*3.^(1/2) ...
  .*cos((2/9).*pi).^2.*sin((2/9).*pi).^3+(-960).*cos((2/9).*pi).^2.* ...
  sin((2/9).*pi).^4+(-384).*cos((2/9).*pi).*sin((2/9).*pi).^5+(-64) ...
  .*sin((2/9).*pi).^6).*sin(t1+t2) ...
                +lambda .* x_vera(t1, t2);
        case 'lin'
            y = @(t1, t2) -0.000246609364 * (t1 + t2) ...
                +lambda * x_vera(t1, t2);
    end
    fprintf("_________________\nlambda = %g\n_________________\n", lambda);
    fprintf("%3s %6s %16s %16s %16s %6s %16s %16s %16s\n", ...
    "ADE", "nodi", "err. 2", "err. max.", "condizion.", ...
    "nodi-C", "err. 2-C", "err. max.-C", "condizion.-C");
    for ade = 1:max_ade
        [err, err_c, numero_nodi, numero_nodi_c, condiz, condiz_c, ...
        x_controllo, x_controllo_c] = ...
        errori_nystrom(ade, poligono, K, y, lambda, x_vera);

        err_2 = norm(err) / norm(x_controllo);
        err_2_c = norm(err_c) / norm(x_controllo_c);
        err_inf = norm(err, Inf) / norm(x_controllo, Inf);
        err_inf_c = norm(err_c, Inf) / norm(x_controllo_c, Inf);
        
        fprintf("%3d %6d %16.10e %16.10e %16.10e %6d %16.10e %16.10e %16.10e\n", ...
        ade, numero_nodi, err_2, err_inf, condiz, numero_nodi_c, ...
        err_2_c, err_inf_c, condiz_c);
    end
end